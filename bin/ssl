#! /usr/bin/env ruby

require "socket"
require "openssl"
require "thread"

def ssl_file(name)
  File.open(File.expand_path("../../ssl/#{name}", __FILE__))
end

def handle_connection(socket, ssl)
  while line = socket.gets
    puts line
    break if line.strip.empty?
  end
  socket.write("HTTP/1.1 200 OK\r\n")
  socket.write("Connection: close\r\n")
  socket.write("\r\n")
  socket.close
end

ctx      = OpenSSL::SSL::SSLContext.new
ctx.cert = OpenSSL::X509::Certificate.new(ssl_file("server.crt"))
ctx.key  = OpenSSL::PKey::RSA.new(ssl_file("server.key"))
https    = OpenSSL::SSL::SSLServer.new(TCPServer.new(20558), ctx)
http     = TCPServer.new(20559)

loop do
  begin
    servers, _, _ = IO.select([ http, https ])
    servers.each do |server|
      Thread.start(server.accept) { |socket| handle_connection(socket, server.is_a?(OpenSSL::SSL::SSLServer)) }
    end
  rescue OpenSSL::SSL::SSLError => e
#    STDERR.write(e.message + " (" + e.class.name + ")\n\t" + e.backtrace.join("\n\t") + "\n")
  end
end
