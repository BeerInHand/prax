{"tagline":"Rack proxy server for development","name":"Prax","body":"# Prax\r\n\r\nA pure ruby alternative to Pow!!\r\n\r\nAka a Rack application spawner and proxy for simpler local development.\r\nCalling `myapp.dev` and `subdomain.myapp.dev` with no\r\nconfiguration is simpler than editing your hosts file, starting your\r\napplications manually on port 3000, etc.\r\n\r\n## Why a pure-ruby alternative?\r\n\r\nMy GNU/Linux fork of Pow just broke on me badly. I ain't smart enought\r\nto understand, less write, any Coffee-Script, so I decided to try an\r\nalternative in Ruby, which I am capable to write, learning a lot about\r\nsockets, HTTP and Rack on the way.\r\n\r\nIt also only requires Ruby and the Rack gem, both you should have already\r\ninstalled if you are a Ruby Web developer.\r\n\r\n## Install\r\n\r\nThere ain't no install script yet. You must install things manually.\r\n\r\n### Rubies\r\n\r\nPrax has been developed with MRI Ruby 1.9.3, but should be compatible with most\r\nruby engines. It has been tested on:\r\n\r\n  - Ruby 1.8.7\r\n  - Ruby 1.9.3\r\n  - Rubinius 2.0.0 (HEAD)\r\n  - JRuby 1.7.0 (1.9 mode)\r\n\r\nPlease note that Ruby 1.8.7 and Rubinius in 1.8 mode also require the `sfl`\r\n(spawn for legacy) gem, because Ruby 1.8 doesn't support `Process.spawn` which\r\nwas introduced in Ruby 1.9.\r\n\r\nJruby in 1.8 mode isn't supported. It requires `fork` which isn't available on\r\nall platforms (not even GNU/Linux). Also, Jruby 1.6.8 just doesn't work with\r\nPrax, neither in 1.8 nor 1.9 modes.\r\n\r\n### GNU/Linux\r\n\r\nFirst clone the repository, install the port forwarding script and NSSwitch\r\nextension.\r\n\r\n    $ git clone git://github.com/ysbaddaden/prax.git\r\n\r\n    $ cd prax/\r\n    $ sudo cp install/initd /etc/init.d/prax\r\n    $ sudo chmod +x /etc/init.d/prax\r\n    $ sudo update-rc.d prax defaults\r\n    $ sudo /etc/init.d/prax start\r\n\r\n    $ cd prax/ext/\r\n    $ make\r\n    $ sudo make install\r\n\r\nEdit `/etc/nsswitch.conf` and add `prax` to the `hosts` line, then\r\nrestart your browser (otherwise it won't use the newly configured prax\r\nrésolver).\r\n\r\nCreate the ̀~/.prax` directory and link your apps to it. You may\r\nlink the same folder multiple times as different names to serve it from\r\ndifferent domains.\r\n\r\n    $ mkdir ~/.prax\r\n    $ ln -sf ~/Work/myapp ~/.prax/\r\n\r\nEventually start `bin/prax` to run Prax, point your browser to\r\nhttp://myapp.dev/ and wait for your Rack app to spawn.\r\n\r\n### Mac OS X\r\n\r\nMac OS X isn't supported yet. Feel free to contribute!\r\n\r\n## Features\r\n\r\nThis is a work in progress, and Prax is missing some features to be on par\r\nwith Pow. Mostly on the configuration side of your development machine. Yet\r\nit's already capable to start the HTTP server, spawn your apps, proxy\r\nrequests, and more.\r\n\r\n- HTTP Server\r\n- HTTP Proxy\r\n- Rack Handler (Racker)\r\n- Rack Application spawn / restart / always restart\r\n- SSL support (if certs and keys are generated)\r\n- [xip.io](http://xip.io/) support\r\n- GNU/Linux:\r\n  - NSSwitch DNS resolver (resolves *.dev domains to 127.0.0.1)\r\n  - iptables rule (redirects root ports 80/443 to user ports 20559/20558)\r\n\r\n### TODO\r\n\r\n- commands for the prax script:\r\n  - prax install\r\n  - prax default\r\n  - prax list\r\n  - prax link [name]\r\n  - prax unlink [name]\r\n  - prax log\r\n  - prax restart\r\n  - prax always_restart\r\n  - prax cleanup\r\n- GNU/Linux:\r\n  - install script\r\n- Mac OS X:\r\n  - firewall rule\r\n  - DNS resolver\r\n  - install script\r\n\r\n## Credits\r\n\r\n- Julien Portalier <julien@portalier.com>\r\n- pyromaniac for the initial NSSwitch extension.\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}